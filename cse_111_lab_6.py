# -*- coding: utf-8 -*-
"""CSE 111 Lab 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIOsfUQWOjQ-l8crSZTAc2tRsk7OAJ0H
"""

#3
class Passenger:
  count=0
  def __init__ (self,name):
    self.name=name
    self.bus_fare=450
    Passenger.count+=1
  def set_bag_weight(self,weight):
    self.weight=weight
    if (self.weight>20 and self.weight<=50):
      self.bus_fare+=50
    elif (self.weight>50):
      self.bus_fare+=100
  def printDetail(self):
    print(f"Name: {self.name}\nBus Fare: {self.bus_fare} taka")


print("Total Passenger:", Passenger.count)
p1 = Passenger("Jack")
p1.set_bag_weight(90)
p2 = Passenger("Carol")
p2.set_bag_weight(10)
p3 = Passenger("Mike")
p3.set_bag_weight(25)
print("=========================")
p1.printDetail()
print("=========================")
p2.printDetail()
print("=========================")
p3.printDetail()
print("=========================")
print("Total Passenger:", Passenger.count)

#4
class Travel:
  count=0
  def __init__ (self,l1,l2):
    self.l1=l1
    self.l2=l2
    Travel.count+=1
    self.time=1
  def set_time(self,time):
    self.time=time
  def set_destination(self,update):
    self.l2=update
  def set_source(self,update):
    self.l1=update
  def display_travel_info(self):
    s=f"Source: {self.l1}\nDestination: {self.l2}\nFlight time: {self.time}:00"
    return s

print('No. of Traveller =', Travel.count)
print("=======================")
t1 = Travel("Dhaka","India")
print(t1.display_travel_info())
print("=======================")
t2 = Travel("Kuala Lampur","Dhaka")
t2.set_time(23)
print(t2.display_travel_info())
print("=======================")
t3 = Travel("Dhaka","New_Zealand")
t3.set_time(15)
t3.set_destination("Germany")
print(t3.display_travel_info())
print("=======================")
t4 = Travel("Dhaka","India")
t4.set_time(9)
t4.set_source("Malaysia")
t4.set_destination("Canada")
print(t4.display_travel_info())
print("=======================")
print('No. of Traveller =', Travel.count)

#1
class Student:
  count=0
  def __init__(self,name,dept,age,cg):
    self.name=name
    self.dept=dept
    self.age=age
    self.cg=cg
    Student.count+=1
    self.id=Student.count
  def get_details(self):
    print(f"ID: {self.id}\nName: {self.name}\nDepertment: {self.dept}\nAge: {self.age}\nCGPA: {self.cg}")

  @classmethod
  def from_String(cls,s):
    name,dept,age,cg=s.split('-')
    obj=cls(name,dept,int(age),float(cg))
    return obj

s1 = Student("Samin", "CSE", 21, 3.91)
s1.get_details()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.get_details()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.get_details()
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.get_details()

#2
class Assassin:
  count=0
  def __init__(self,name,rate):
    self.name=name
    self.rate=rate
    Assassin.count+=1
    self.counts=Assassin.count
  def printDetails(self):
    print(f"Name: {self.name}\nSuccess rate: {self.rate}%\nTotal number of Assassin: {self.counts}")
  @classmethod
  def failureRate(cls,n,r):
    rate=100-r
    name=n
    obj=cls(name,rate)
    return obj
  @classmethod
  def failurePercentage(cls,n,r):
    name=n
    rate=100-(int(r[:-1]))
    obj=cls(name,rate)
    return obj


john_wick = Assassin('John Wick', 100)
john_wick.printDetails()
print('================================')
nagisa = Assassin.failureRate("Nagisa", 20)
nagisa.printDetails()
print('================================')
akabane = Assassin.failurePercentage("Akabane", "10%")
akabane.printDetails()

#5
class Employee:
  def __init__ (self,name,exp):
    self.name=name
    self.workingPeriod=exp

  @classmethod
  def employeeByJoiningYear(cls,name,year):
    name=name
    exp=2022-year
    obj=cls(name,exp)
    return obj
  @staticmethod
  def experienceCheck(a,b):
    if a>2:
      if b=='male':
        print('He is experienced')
      elif b=='female':
        print('She is experienced')
    elif a<=2:
      if b=='male':
        print('He is not experienced')
      elif b=='female':
        print('She is not experienced')


employee1 = Employee('Dororo', 3)
employee2 = Employee.employeeByJoiningYear('Harry', 2016)
print(employee1.workingPeriod)
print(employee2.workingPeriod)
print(employee1.name)
print(employee2.name)
print(Employee.experienceCheck(2, "male"))
print(Employee.experienceCheck(3, "female"))

#6
class Laptop:
  laptopCount=0
  def __init__(self,name,num):
    self.name=name
    self.count=num
    Laptop.laptopCount+=self.count

  @staticmethod
  def advantage():
    print('Laptops are portable')
  @staticmethod
  def resetCount():
    Laptop.laptopCount=0
lenovo = Laptop("Lenovo", 5);
dell = Laptop("Dell", 7);
print(lenovo.name, lenovo.count)
print(dell.name, dell.count)
print("Total number of Laptops", Laptop.laptopCount)
Laptop.advantage()
Laptop.resetCount()
print("Total number of Laptops", Laptop.laptopCount)

#7
class Cat:
  Number_of_cats=0
  def __init__ (self,color,action):
    self.color=color
    self.action=action
    Cat.Number_of_cats+=1
    self.count=Cat.Number_of_cats
  def printCat(self):
    print(f"{self.color} cat is {self.action}")
  @classmethod
  def no_parameter(cls):
    color='White'
    action='sitting'
    obj=cls(color,action)
    return obj


  @classmethod
  def first_parameter(cls,upd):
    color=upd
    action='sitting'
    obj=cls(color,action)
    return obj
  @classmethod
  def second_parameter(cls,update):
    color='Grey'
    action=update
    obj=cls(color,action)
    return obj
  def changeColor(self,update):
    self.color=update



print("Total number of cats:", Cat.Number_of_cats)
c1 = Cat.no_parameter()
c2 = Cat.first_parameter("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c5 = Cat.second_parameter("playing")
print("=======================")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c5.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()
print("=======================")
print("Total number of cats:", Cat.Number_of_cats)

#8
import math

class Cylinder:
  radius=5
  height=18
  def __init__(self,a,b):
    print(f'Default radius={Cylinder.radius} and height= {Cylinder.height}')
    Cylinder.radius=a
    Cylinder.height=b
    print(f'Updated radius={Cylinder.radius} and height= {Cylinder.height}')

  @classmethod
  def swap(cls, rad, ht):
    return cls(ht, rad)

  @classmethod
  def changeFormat(cls, a):
    r1, h1 = a.split("-")
    return cls(float(r1),float(h1))

  @staticmethod
  def area (c,d):
    print(f"Area: {float(2*math.pi*c*d)+float(2*math.pi*c*d)}")

  @staticmethod
  def volume(c,d):
    print(f"volume: {math.pi*c*c*d}")

c1 = Cylinder(0,0)
Cylinder.area(c1.radius,c1.height)
Cylinder.volume(c1.radius,c1.height)
print("===============================")
c2 = Cylinder.swap(8,3)
c2.area(c2.radius,c2.height)
c2.volume(c2.radius,c2.height)
print("===============================")
c3 = Cylinder.changeFormat("7-13")
c3.area(c3.radius,c3.height)
c3.volume(c3.radius,c3.height)
print("===============================")
Cylinder(0.3,5.56).area(Cylinder.radius,Cylinder.height)
print("===============================")
Cylinder(3,5).volume(Cylinder.radius,Cylinder.height)

#9
class Student:
  totalstudent=0
  totalbracuuniversity=0
  totalinstitution=0
  def __init__(self,a,b,c=None):
    if c==None:
      self.name=a
      self.dept=b
      self.uni='BRAC University'
      Student.totalstudent+=1
      Student.totalbracuuniversity+=1
    else:
      self.name=a
      self.dept=b
      self.uni=c
      Student.totalstudent+=1
      Student.totalinstitution+=1
  @classmethod
  def printDetails(cls):
    print(f"Total Student(s) :{Student.totalstudent}\nBrac University Student(s):{Student.totalbracuuniversity}\nOther Institution Student(s): {Student.totalinstitution}")

  def individualDetail(self):
    print(f'Name: {self.name}\nDepertment: {self.dept}\nInstitution: {self.uni} ')
  @classmethod
  def createStudent(cls,a,b,c=None):
    if c==None:
      name=a
      dept=b
      uni=c
      obj=cls(name,dept,uni)
      return obj
    else:
      name=a
      dept=b
      uni=c
      obj=cls(name,dept,uni)
    return obj


Student.printDetails()
print('#########################')

mikasa = Student('Mikasa Ackerman', "CSE")
mikasa.individualDetail()
print('------------------------------------------')
Student.printDetails()

print('========================')

harry = Student.createStudent('Harry Potter', "Defence Against Dark Arts", "Hogwarts School")
harry.individualDetail()
print('-------------------------------------------')
Student.printDetails()

print('=========================')

levi = Student.createStudent("Levi Ackerman", "CSE")
levi.individualDetail()
print('--------------------------------------------')
Student.printDetails()

#10
class SultansDine:
    branch = 0
    sell = 0
    info = []
    def __init__(self,location):
        self.location = location
        SultansDine.branch +=1

    def sellQuantity(self,quantity):
        self.quantity = quantity
        if self.quantity <10:
            self.sell = self.quantity * 300
        elif self.quantity <20:
            self.sell = self.quantity * 350
        else:
            self.sell = self.quantity * 400

        SultansDine.sell += self.sell


    def branchInformation(self):
        print(f'Branch Name: {self.location}')
        print(f'Branch Sell: {SultansDine.sell} Taka')
        SultansDine.info.append(self.location)
        SultansDine.info.append(self.sell)

    @classmethod
    def details(cls):
        print(f"Total Number of branch(s): {cls.branch}")
        print(f"Total Sell: {cls.sell}")

        for index in range(0, len(SultansDine.info), 2):
            print(f"Branch Name: {SultansDine.info[index]}, Branch Sell: {SultansDine.info[index + 1]} Taka")
            print(f"Branch consists of total sell's: {(SultansDine.info[index + 1] / SultansDine.sell) * 100:.2f}%")
SultansDine.details()
print('########################')
dhanmodi = SultansDine('Dhanmondi')
dhanmodi.sellQuantity(25)
dhanmodi.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

baily_road = SultansDine('Baily Road')
baily_road.sellQuantity(15)
baily_road.branchInformation()
print('-----------------------------------------')
SultansDine.details()

print('========================')

gulshan = SultansDine('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('-----------------------------------------')
SultansDine.details()

#11
class Puzzle:
  x = 0
  def methodA(self):
    Puzzle.x = 5
    z = Puzzle.x + self.methodB(Puzzle.x)
    print(Puzzle.x, z)
    z = self.methodB(z + 2) + Puzzle.x
    print(Puzzle.x, z)
    self.methodB(Puzzle.x, z)
    print(Puzzle.x, z)
  def methodB(self, *args):
    if len(args) == 1:
      y = args[0]
      Puzzle.x = y + Puzzle.x
      print(Puzzle.x, y)
      return Puzzle.x + 3
    else:
      z, x = args
      z = z + 1
      x = x + 1
      print(z, x)

p = Puzzle()
p.methodA()
p.methodA()
p = Puzzle()
p.methodA()
p.methodB(7)

#12
class FinalT6A:
    temp = 3

    def __init__(self, x, p):
        self.sum, self.y = 0, 2
        FinalT6A.temp += 3
        self.y = self.temp - p
        print('self.temp',self.temp)
        print('self.y',self.y)
        print('self.sum',self.sum)
        print('p',p)
        print('x',x)
        self.sum = self.temp + x
        print('self.sum',self.sum)
        print('output')
        print(x, self.y, self.sum)

    def methodA(self):
        x, y = 0, 0
        print('method A')
        print(f'x {x} y {y}')
        y = y + self.y
        print(f'y {y}')
        x = self.y + 2 + self.temp
        print('x', x)
        self.sum = x + y + self.methodB(self.temp, y)
        print('self.sum',self.sum)
        print('output')
        print(x, y, self.sum)

    def methodB(self, temp, n):
        print('method B')
        print(f'temp {temp} n {n} ')
        x = 0
        FinalT6A.temp += 1
        print('temp',FinalT6A.temp )
        self.y = self.y + (FinalT6A.temp)
        print('self.y', self.y)
        FinalT6A.temp -= 1
        print('temp',FinalT6A.temp )
        x = x + 2 + n
        print('x',x)
        self.sum = self.sum + x + self.y
        print('self.sum',self.sum)
        print('output')
        print(x, self.y, self.sum)
        return self.sum
q1 = FinalT6A(2,1)
q1.methodA()
q1.methodA()

class A:
    temp = 4
    def __init__(self):
        self.y = self.temp - 2
        self.sum = self.temp + 1
        A.temp -= 2
        self.methodA(3, 4)
    def methodA(self, m, n):
        x = 0
        self.y = self.y + m + (self.temp)
        A.temp += 1
        x = x + 1 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)

class B:
    x = 0
    def __init__(self, b = None):
        self.y, self.temp, self.sum = 5, -5, 2

        if b == None:
            self.y = self.temp + 3
            self.sum = 3 + self.temp + 2
            self.temp -= 2
        else:
            self.sum = b.sum
            B.x = b.x
            b.methodB(2, 3)
    def methodA(self, m, n):
        x = 2
        self.y = self.y + m + (self.temp)
        self.temp += 1
        x = x + 5 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)
    def methodB(self, m, n):
        y = 0
        y = y + self.y
        B.x = self.y + 2 + self.temp
        self.methodA(self.x, y)
        self.sum = self.x + y + self.sum
        print(self.x, y, self.sum)

a1=A()
b1=B()
b2=B(b1)
b1.methodA(1,2)
b2.methodB(3,2)

#14
class msgClass:
    def __init__(self):
        self.content = 0

class Quiz3:
    x = 0
    def __init__(self, k = None):
        self.sum, self.y = 0, 0
        if k is None:
            self.sum = 5
            Quiz3.x = 2
            self.y = 2
        else:
            self.sum = self.sum + k
            self.y = 3
            Quiz3.x += 2
    def methodA(self):
        x = 1
        y = 1
        msg = [None]
        myMsg = msgClass()
        myMsg.content = Quiz3.x
        msg[0] = myMsg
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(msg[0])
        y = self.methodB(msg[0]) + self.y
        x = y + self.methodB(msg, msg[0])
        self.sum = x + y + msg[0].content
        print(x, y, self.sum)
    def methodB(self, *args):
        if len(args) == 2:
            mg2, mg1 = args
            x = 2
            self.y = self.y + mg2[0].content
            mg2[0].content = self.y + mg1.content
            x = x + 2 + mg1.content
            self.sum = self.sum + x + self.y
            mg1.content = self.sum - mg2[0].content
            print(Quiz3.x, self.y, self.sum)
            return self.sum

        elif len(args) == 1:
            mg1, = args
            x = 1
            y = 2
            y = self.sum + mg1.content
            self.y = y + mg1.content
            x = Quiz3.x + 5 + mg1.content
            self.sum = self.sum + x + y
            Quiz3.x = mg1.content + x + 3
            print(x, y, self.sum)
            return y

a1 = Quiz3()
a2 = Quiz3(5)
msg = msgClass()
a1.methodA()
a2.methodB(msg)