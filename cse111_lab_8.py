# -*- coding: utf-8 -*-
"""CSE111 Lab 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qwHN2SGoKNlREREIphkYiiaNqaCEXdh1
"""

#task 1
class RealNumber:

    def __init__(self, r=0):
        self.__realValue = r
    def getRealValue(self):
        return self.__realValue
    def setRealValue(self, r):
        self.__realValue = r
    def __str__(self):
        return 'RealPart: '+str(self.getRealValue())
class ComplexNumber(RealNumber):
    def __init__(self,r=1.0,im=1.0):
      super().__init__(float(r))
      self.im=float(im)
    def __str__(self):
      return f"{super().__str__()}\nImaginaryPart: {self.im} "

cn1 = ComplexNumber()
print(cn1)
print('---------')
cn2 = ComplexNumber(5,7)
print(cn2)

#2
class RealNumber:
    def __init__(self, number=0):
        self.number = number
    def __add__(self, anotherRealNumber):
        return self.number + anotherRealNumber.number
    def __sub__(self, anotherRealNumber):
        return self.number - anotherRealNumber.number
    def __str__(self):
        return str(self.number)

class ComplexNumber(RealNumber):
  def __init__(self,r,im):
    if type(r)==int:
      super().__init__(r)
    else:
      super().__init__(r.number)
    self.im=im
  def __str__(self):
    return f"{super().__str__()} + {self.im}i"
  def __add__(self,other):
    a=super().__add__(other)
    b=self.im+other.im
    return ComplexNumber(a,b)
  def __sub__(self,other):
    a=self.number-other.number
    b=self.im-other.im
    return ComplexNumber(a,b)

r1 = RealNumber(3)
r2 = RealNumber(5)
print(r1+r2)
cn1 = ComplexNumber(2, 1)
print(cn1)
cn2 = ComplexNumber(r1, 5)
print(cn2)
cn3 = cn1 + cn2
print(cn3)
cn4 = cn1 - cn2
print(cn4)

#3
class Account:
    def __init__(self, balance):
        self._balance = balance

    def getBalance(self):
        return self._balance

class CheckingAccount(Account):
  numberOfAccount=0
  def __init__(self,balance=0):
    super().__init__(balance)
    CheckingAccount.numberOfAccount+=1
  def __str__(self):
    return f'Account Balance: {super().getBalance()}'


print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)

#4
class Fruit:
    def __init__(self, formalin=False, name=''):
        self.__formalin = formalin
        self.name = name

    def getName(self):
        return self.name

    def hasFormalin(self):
        return self.__formalin

class testFruit:
    def test(self, f):
        print('----Printing Detail----')
        if f.hasFormalin():
            print('Do not eat the',f.getName(),'.')
            print(f)
        else:
            print('Eat the',f.getName(),'.')
            print(f)
class Mango(Fruit):
  def __init__(self):
    super().__init__(formalin=True,name='Mango')
  def __str__(self):
    return f"{super().getName()}s are bad for you"
class Jackfruit(Fruit):
  def __init__(self):
    super().__init__(formalin=False,name='Jackfruit')
  def __str__(self):
    return f"{super().getName()}s are good for you"


m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#5
class Exam:
    def __init__(self,marks):
        self.marks = marks
        self.time = 60

    def examSyllabus(self):
        return "Maths , English"
    def examParts(self):
        return "Part 1 - Maths\nPart 2 - English\n"
class ScienceExam(Exam):
  def __init__(self,marks,time,*args):
    super().__init__(marks)
    self.time=time
    self.args=list(args)
  def __str__(self):
    return f"OUTPUT\nMarks: {self.marks} Time: {self.time} minutes Number of Parts {len(self.args)+2}"
  def examSyllabus(self):
    s= ', '.join(self.args)
    return f"{super().examSyllabus()} , {s}"
  def examParts(self):

    ans=''
    for e in range(len(self.args)):
      ans+=f'Part {3+e} - {self.args[e]}\n'
    return f"{super().examParts()}{ans}"


engineering = ScienceExam(100,90,"Physics","HigherMaths")
print(engineering)
print('----------------------------------')
print(engineering.examSyllabus())
print(engineering.examParts())
print('==================================')
architecture = ScienceExam(100,120,"Physics","HigherMaths","Drawing")
print(architecture)
print('----------------------------------')
print(architecture.examSyllabus())
print(architecture.examParts())

#6
class Shape3D:

  pi = 3.14159
  def __init__(self, name = 'Default', radius = 0):
    self._area = 0
    self._name = name
    self._height = 'No need'
    self._radius = radius

  def calc_surface_area(self):
    return 2 * Shape3D.pi * self._radius

  def __str__(self):
      return "Radius: "+str(self._radius)
class Sphere(Shape3D):
  def __init__(self,name='Default',radius=0):
    super().__init__(name,radius)
    print(f"Shape name: {self._name},Area Formula: 4* pi *r*r ")
  def __str__(self):
    return f"{super().__str__()}, Height: {self._height}\nArea: {super().calc_surface_area()*2*self._radius}"
class Cylinder(Shape3D):
  def __init__(self,name = 'Default', radius = 0, height = 0):
      super().__init__(name,radius)
      self.height = height
      print(f"Shape name: {self._name}, Area Formula: 2 * pi * r * (r + h)")
  def __str__(self):
     return f"{super().__str__()},Height: {self._height}\nArea: {super().calc_surface_area()*(self._radius + self.height)}"

sph = Sphere('Sphere', 5)
print('----------------------------------')
sph.calc_surface_area()
print(sph)
print('==================================')
cyl = Cylinder('Cylinder', 5, 10)
print('----------------------------------')
cyl.calc_surface_area()
print(cyl)

#7
class PokemonBasic:

  def __init__(self, name = 'Default', hp = 0, weakness = 'None', type = 'Unknown'):
    self.name = name
    self.hit_point = hp
    self.weakness = weakness
    self.type = type

  def get_type(self):
    return 'Main type: ' + self.type

  def get_move(self):
    return 'Basic move: ' + 'Quick Attack'

  def __str__(self):
    return "Name: " + self.name + ", HP: " + str(self.hit_point) + ", Weakness: " + self.weakness



class PokemonExtra(PokemonBasic):
  def __init__(self,name = 'Default', hp = 0, weakness = 'None', type = 'Unknown',a='',b=''):
    super().__init__(name,hp,weakness,type)
    self.a=a
    self.b=b
  def get_type(self):
    if self.a!='':
      return f" {super().get_type()} Second Type: {self.a}"
    else:
      return f" {super().get_type()}"
  def get_move(self):
    if self.b=='':
      return f"{super().get_move()}"
    else:
      return f"{super().get_move()} Other moves:{','.join(self.b)} "
  def __str__(self):
     return f"{super().__str__()}"


print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())

print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())

print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water', 'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#8
class Team:

    def __init__(self, name):
        self.name = "default"
        self.total_player = 5
    def info(self):
        print("We love sports")
class FootBallTeam(Team):
  def __init__(self,name):
    super().__init__(name)
    self.total_player=11
    self.name=name
  def info(self):
    print('Our name is',self.name)
    print('We play football')
    return f"{super().info()} "
class CricketTeam(Team):
    def __init__(self, name):
        super().__init__(name)
        self.total_player = 11
        self.name = name

    def info(self):
        print("Our name is", self.name)
        print("we play cricket")
        return f"{super().info()}"

class Team_test:
    def check(self, tm):
        print("=========================")
        print("Total Player: ", tm.total_player)
        tm.info()

f = FootBallTeam("Brazil")
c = CricketTeam("Bangladesh")
test = Team_test()
test.check(f)
test.check(c)

#9
class Pokemon:

    def __init__(self, p):
        self.pokemon = p
        self.pokemon_type = "Needs to be set"
        self.pokemon_weakness = "Needs to be set"
    def kind(self):
        return self.pokemon_type
    def weakness(self):
        return self.pokemon_weakness
    def what_am_i(self):
        print("I am a Pokemon.")
class Pikachu(Pokemon):
  def __init__(self,a='Pikachu'):
    super().__init__(a)
    self.pokemon_type = "Electric"
    self.pokemon_weakness = " Ground"
  def kind(self):
    return super().kind()
  def weakness(self):
    return super().weakness()
  def what_am_i(self):
    super().what_am_i()
    print("I am",self.pokemon)
class Charmander(Pokemon):
  def __init__(self,a='Charmander'):
    super().__init__(a)
    self.pokemon_type = "Electric"
    self.pokemon_weakness = " Ground"
  def kind(self):
    return super().kind()
  def weakness(self):
    return super().weakness()
  def what_am_i(self):
    super().what_am_i()
    print("I am",self.pokemon)


pk1 = Pikachu()
print("Pokemon:", pk1.pokemon)
print("Type:", pk1.kind())
print("Weakness:", pk1.weakness())
pk1.what_am_i()
print("========================")
c1 = Charmander()
print("Pokemon:", c1.pokemon)
print("Type:", c1.kind())
print("Weakness:", c1.weakness())
c1.what_am_i()

#10
class Department:
    def __init__(self, s):
        self.semester = s
        self.name = "Default"
        self.id = -1

    def student_info(self):
        print("Name:", self.name)
        print("ID:", self.id)

    def courses(self, c1, c2, c3):
        print("No courses Approved yet!")
class CSE(Department):
  def __init__(self,name,id,s):
    super().__init__(s)
    self.name=name
    self.id=id
  def student_info(self):
    super().student_info()
  def courses(self,c1, c2, c3):
    self.c1=c1
    self.c2=c2
    self.c3=c3
    print(f"Courses Approved to this CSE student in {self.semester} semester :\n{self.c1}\n{self.c2}\n{self.c3} ")
class EEE(Department):
  def __init__(self,name,id,s):
    super().__init__(s)
    self.name=name
    self.id=id
  def student_info(self):
    super().student_info()
  def courses(self,c1, c2, c3):
    self.c1=c1
    self.c2=c2
    self.c3=c3
    print(f"Courses Approved to this CSE student in {self.semester} semester :\n{self.c1}\n{self.c2}\n{self.c3} ")



s1 = CSE("Rahim", 16101328,"Spring2016")
s1.student_info()
s1.courses("CSE110", "MAT110", "ENG101")
print("==================")
s2 = EEE("Tanzim", 18101326, "Spring2018")
s2.student_info()
s2.courses("Mat110", "PHY111", "ENG101")
print("==================")
s3 = CSE("Rudana", 18101326, "Fall2017")
s3.student_info()
s3.courses("CSE111", "PHY101", "MAT120")
print("==================")
s4 = EEE("Zainab", 19201623, "Summer2019")
s4.student_info()
s4.courses("EEE201", "PHY112", "MAT120")

#11
class A:
    def __init__(self):
        self.temp = 4
        self.sum = 1
        self.y = 2
        self.y = self.temp - 2
        self.sum = self.temp + 3
        self.temp -= 2
    def methodA(self, m,  n):
        x = 0
        self.y = self.y + m + self.temp
        print(self.y)
        self.temp += 1
        x = x + 2 + n
        self.sum = self.sum + x + self.y
        print(x, self.y, self.sum)

class B(A):
    def __init__(self, b=None):
        super().__init__()
        self.x = 1
        self.sum = 2
        if b == None:
            self.y = self.temp + 3
            print(self.y)
            self.sum = 3 + self.temp + 2
            print(self.sum)
            self.temp -= 1
            print(self.temp)
        else:
            self.sum = b.sum
            print(self.sum)
            self.x = b.x
            print(b.x)
    def methodB(self, m,  n):
        y = 0
        y = y + self.y
        print('self.y',self.y)
        self.x = y + 2 + self.temp
        print(self.x)
        self.methodA(self.x, y)
        self.sum = self.x + y + self.sum
        print(self.x, y, self.sum)

a1 = A()
b1 = B()
b2 = B(b1)
a1.methodA(1, 1)
b1.methodA(1, 2)
b2.methodB(3, 2)

class A:
  temp = 3
  def __init__(self):
    self.sum = 0
    self.y = 0
    self.y = A.temp - 1
    self.sum = A.temp + 2
    A.temp -= 2

  def methodA(self, m, n):
    x = 0
    n[0] += 1
    print(n[0],'nnn')
    print('self.y first',self.y)
    self.y = self.y + m + A.temp
    print(self.y,"yy")
    A.temp += 1
    x = x + 2 + n[0]
    n[0] = self.sum + 2

    print(f"{x} {self.y} {self.sum}")

class B(A):
  x = 1
  def __init__(self, b = None):
    super().__init__()
    self.sum = 2
    if b == None:
      self.y = self.temp + 1
      print(self.x)
      B.x = 3 + A.temp + self.x
      print(self.y,self.x)
      A.temp -= 2
    else:
      self.sum = self.sum + self.sum
      print(b.x)
      B.x = b.x + self.x
      print(B.x)
  def methodB(self, m, n):
    y = [0]
    self.y = y[0] + self.y + m
    B.x = self.y + 2 +  self.temp - n
    print('Bx',B.x,self.x,y)
    self.methodA(self.x, y)
    self.sum = self.x + y[0] + self.sum
    print(f"{self.x} {y[0]} {self.sum}")

x = [23]
a1 = A()
b1 = B()
b2 = B(b1)
a1.methodA(1, x)
b2.methodB(3, 2)
a1.methodA(1, x)

class A:
  temp = 7
  def __init__(self):
    self.sum, self.y = 0, 0
    self.y = A.temp - 1
    self.sum = A.temp + 2
    A.temp -= 3
  def methodA(self, m, n):
    x = 4
    n[0] += 1
    self.y = self.y + m + A.temp
    A.temp += 2
    x = x + 3 + n[0]
    n[0] = self.sum + 2
    print(f"{x} {self.y} {self.sum}")
  def get_A_sum(self):
    return self.sum
  def update_A_y(self, val):
    self.y = val
class B(A):
  x = 2
  def __init__(self, b = None):
    super().__init__()
    self.sum = 2
    if b == None:
      self.y = self.temp + 1
      B.x = 4 + A.temp + self.x
      A.temp -= 2
    else:
      self.sum = self.sum + self.get_A_sum()
      B.x = b.x + self.x
  def methodB(self, m, n):
    y = [0]
    self.update_A_y(y[0] + self.y + m)
    B.x = self.y + 4 +  self.temp - n
    self.methodA(self.x, y)
    self.sum = self.x + y[0] + self.get_A_sum()
    print(f"{self.x} {y[0]} {self.sum}")

x = [32]
a1 = A()
b1 = B()
b2 = B(b1)
a1.methodA(2, x)
b2.methodB(2, 3)
a1.methodA(3, x)